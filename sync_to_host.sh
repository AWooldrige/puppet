#!/bin/bash
#
# This is a positional arguments-only example of Argbash potential
#
# ARG_HELP([Take the current puppet code directory and apply to external host])
# ARG_POSITIONAL_SINGLE([hostname],[Hostname of machine to SSH/SCP to])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS

print_help ()
{
	printf '%s\n' "Take the current puppet code directory and apply to external host"
	printf 'Usage: %s [-h|--help] <hostname>\n' "$0"
	printf '\t%s\n' "<hostname>: Hostname of machine to SSH/SCP to"
	printf '\t%s\n' "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_positionals+=("$1")
				;;
		esac
		shift
	done
}


handle_passed_args_count ()
{
	_required_args_string="'hostname'"
	test ${#_positionals[@]} -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${#_positionals[@]}." 1
	test ${#_positionals[@]} -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${#_positionals[@]} (the last one was: '${_positionals[*]: -1}')." 1
}

assign_positional_args ()
{
	_positional_names=('_arg_hostname' )

	for (( ii = 0; ii < ${#_positionals[@]}; ii++))
	do
		eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


echo "Value of first argument: $_arg_hostname"


function log {
    echo "[$(date --rfc-3339=ns)] ${1}"
}


log "To apply changes, manually SSH onto ${_arg_hostname} and run 'cd ~/puppet_rsync_copy && sudo make apply'"

log "Running initial rsync"
# TODO: Remove this duplication
rsync -az --delete . "${_arg_hostname}:~/puppet_rsync_copy"

log "Initial rsync complete, setting up inotifywait"
while inotifywait -e create,modify,delete -r ./*; do
    rsync -az --delete . "${_arg_hostname}:~/puppet_rsync_copy"
done


# ] <-- needed because of Argbash
