#!/usr/bin/python
#########################################################################
##   This file is controlled by Puppet - changes will be overwritten   ##
#########################################################################

import argparse
import subprocess
import tempfile
import textwrap
import shutil

class WordpressBackup(object):

    def __init__(self, bkp_type, dest_path, wp_path, domain, identifier):
        self._bkp_type   = bkp_type
        self._dest_path  = dest_path
        self._wp_path    = wp_path
        self._domain     = domain
        self._identifier  = identifier

        self._db_prfx = 'wp_'
        self._db_name = self._db_prfx + self._identifier


    def build_transfer_command(self):
        return False

    def mysql_bkp_cmd(self, tmp_path):

        # Dump the MySQL table to a file
        cmd = '/usr/bin/mysqldump %s > %s/%s.sql;' % \
        (self._db_name, tmp_path, self._db_name)

        # rdiff to backup location
        cmd += '/usr/bin/rdiff-backup --create-full-path %s %s/%s/mysql;' % \
        (tmp_path, self._dest_path, self._identifier)

        # remove the temporary files
        cmd += '/bin/rm -rf %s;' % \
        (tmp_path)

        # remove old backups
        cmd += '/usr/bin/rdiff-backup --remove-older-than 2W %s %s/%s/mysql;' % \
        (tmp_path, self._dest_path, self._identifier)

        return cmd


    def wpcontent_bkp_cmd(self):
        return False


    def shell_execute(self, command):

        process = subprocess.Popen(
            ['/bin/bash', '-c', command],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            shell=False
        )

        stderr_buffer = ""
        stdout_buffer = ""

        # retcode will return 'None' whilst the subprocess is running, sit in a
        # while loop whilst it's running, returning the output at the end
        while(True):
            retcode = process.poll()
            stdout_buffer += process.stdout.readline()
            stderr_buffer += process.stderr.readline()
            if(retcode is not None):
                return {
                    'return_code' : retcode,
                    'stdout' : stdout_buffer,
                    'stderr' : stderr_buffer
                }


if __name__ == "__main__":
    argparser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''\
            WordPress Backup Script
            --------------------------------
            Manages incremental and full backups of WordPress instances, to either
            filesystem or rdiff-backup servers.
        ''')
    )
    argparser.add_argument(
        'identifier',
        type=str,
        help='Identifier used for the WordPress instance.'
    )
    argparser.add_argument(
        '-m',
        '--method',
        type=str,
        default='filesystem',
        choices=['rdiff', 'filesystem'],
        help='Method of backup, copy to local fileystem, rdiff-backup?'
    )
    argparser.add_argument(
        '-dp',
        '--destination-path',
        required=True,
        type=str,
        help='The full path to the destination directory. ' +
             'E.g. if using filesystem "/var/backups. " ' +
             'E.g. if using rdiff-backup -  backup8::/var/backups'
    )
    argparser.add_argument(
        '-p',
        '--wordpress-path',
        required=True,
        type=str,
        help='The full path to the WordPress instance to backup. ' +
             'E.g. "/var/www/woolie-co-uk" '
    )
    argparser.add_argument(
        '-d',
        '--domain',
        required=True,
        type=str,
        help='The domain used for the WordPress install. E.g. "woolie.co.uk"'
    )
    args = argparser.parse_args()


    bkp = WordpressBackup(
        bkp_type=args.method,
        dest_path=args.destination_path,
        wp_path=args.wordpress_path,
        domain=args.domain,
        identifier=args.identifier
    )
    #tmp_path = tempfile.mkdtemp()
    print bkp.mysql_bkp_cmd('/tmp/test')
