#!/usr/bin/python
#########################################################################
##   This file is controlled by Puppet - changes will be overwritten   ##
#########################################################################
#
# Restoring from backups usage example:
#
#   - If restoring from backups for the same hostname:
#       wp-backup -r ompcouk
#
#   - To restore from backups for a different hostname
#       wp-backup -r -f hera.woolie.co.uk ompcouk
#
#   - To see what commands would be executed
#       wp-backup --no-op -r ompcouk


import argparse
import subprocess
import socket
import tempfile
import textwrap
import shutil
import pprint
import ConfigParser

class WordpressBackup(object):

    def __init__(self, btype, dest_path, wp_path, domain, no_op, identifier,
                 restore, from_host):
        self._btype     = btype
        self._dest_path  = dest_path + '/' +  from_host
        self._wp_path    = wp_path
        self._domain     = domain
        self._no_op      = no_op
        self._identifier = identifier
        self._restore    = restore
        self._from_host  = from_host

        self._db_prfx    = 'wp_'
        self._db_name    = self._db_prfx + self._identifier

        #Are we restoring or backing up?
        if restore:
            if self._no_op:
                tmpfile = '/tmp/randomtmpdir'
            else:
                tmpfile = tempfile.mkdtemp()

            for output in self.shell_execute(self.mysql_rstr_cmd(tmpfile)):
                if output['return_code'] != 0:
                    print '   - FAILURE'
                    pprint.pprint(output)

            for output in self.shell_execute(self.wpcontent_rstr_cmd()):
                if output['return_code'] != 0:
                    print '   - FAILURE'
                    pprint.pprint(output)

        else:
            if self._no_op:
                tmpfile = '/tmp/randomtmpdir'
            else:
                tmpfile = tempfile.mkdtemp()

            for output in self.shell_execute(self.mysql_bkp_cmd(tmpfile)):
                if output['return_code'] != 0:
                    print '   - FAILURE'
                    pprint.pprint(output)

            for output in self.shell_execute(self.wpcontent_bkp_cmd()):
                if output['return_code'] != 0:
                    print '   - FAILURE'
                    pprint.pprint(output)


    def build_transfer_command(self):
        return False


    def mysql_bkp_cmd(self, tmp_path):
        cmds = []

        # Dump the MySQL table to a file
        cmds.append('/usr/bin/mysqldump %s > %s/%s.sql' % \
        (self._db_name, tmp_path, self._db_name))

        # rdiff to backup location
        cmds.append('/usr/bin/rdiff-backup --create-full-path %s %s/%s/mysql' % \
        (tmp_path, self._dest_path, self._identifier))

        # remove old backups
        cmds.append('/usr/bin/rdiff-backup --remove-older-than 2W %s/%s/mysql' % \
        (self._dest_path, self._identifier))

        # remove the temporary files
        cmds.append('/bin/rm -rf %s' % \
        (tmp_path))

        return cmds


    def mysql_rstr_cmd(self, tmp_path):
        cmds = []

        # Pull in the mysql dump to the temporary location
        cmds.append('/usr/bin/rdiff-backup -r now %s/%s/mysql %s' % \
        (self._dest_path, self._identifier, tmp_path))

        # Drop any tables currently in the database
        cmds.append('/usr/bin/mysqldump --no-data --add-drop-table %s | grep ^DROP | /usr/bin/mysql %s' %\
        (self._db_name, self._db_name))

        # Import the SQL statements
        cmds.append('/usr/bin/mysql %s < %s/%s.sql' % \
        (self._db_name, tmp_path, self._db_name))

        # Remove the temporary files
        cmds.append('/bin/rm -rf %s' % \
        (tmp_path))

        return cmds


    def wpcontent_bkp_cmd(self):
        cmds = []

        # rdiff to backup location
        cmds.append('/usr/bin/rdiff-backup --create-full-path %s/wp-content %s/%s/wp-content' % \
        (self._wp_path, self._dest_path, self._identifier))

        # remove old backups
        cmds.append('/usr/bin/rdiff-backup --remove-older-than 2W %s/%s/wp-content' % \
        (self._dest_path, self._identifier))

        return cmds


    def wpcontent_rstr_cmd(self):
        cmds = []

        # Clear out current wp-content
        cmds.append('/bin/rm -rf %s/wp-content' % \
        (self._wp_path))

        # rdiff to backup location
        cmds.append('/usr/bin/rdiff-backup -r now %s/%s/wp-content %s/wp-content' % \
        (self._dest_path, self._identifier, self._wp_path))

        return cmds


    def shell_execute(self, cmds):
        if self._no_op:
            print "\nShell commands that would have ran:"
        else:
            print "\nExecuting shell commands:"

        for cmd in cmds:
            print('  ' + cmd)

            if not self._no_op:
                process = subprocess.Popen(
                    ['/bin/bash', '-c', cmd],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    shell=False
                )

                stderr_buffer = ""
                stdout_buffer = ""

                # retcode will return 'None' whilst the subprocess is running, sit in a
                # while loop whilst it's running, returning the output at the end
                while(True):
                    retcode = process.poll()
                    stdout_buffer += process.stdout.readline()
                    stderr_buffer += process.stderr.readline()
                    if(retcode is not None):
                        yield {
                            'return_code' : retcode,
                            'stdout' : stdout_buffer,
                            'stderr' : stderr_buffer
                        }
                        break


if __name__ == "__main__":
    argparser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''\
            WordPress Backup Script
            --------------------------------
            Manages incremental and full backups of WordPress instances, to either
            filesystem or rdiff-backup servers.
        ''')
    )
    argparser.add_argument(
        'identifier',
        type=str,
        help='Identifier used for the WordPress instance. Referencing a config'+
             ' file under /etc/wp-backup/'
    )
    argparser.add_argument(
        '-n',
        '--no-op',
        action='store_true',
        help='If no-op is flagged, no operations will occur, the script will ' +
             'just dump the commands it would have ran'
    )
    argparser.add_argument(
        '-r',
        '--restore-from-backup',
        action='store_true',
        help='Restore from backup, specify the hostname to restore from with '+
             '-f or the default is the current machine\'s hostname'
    )
    argparser.add_argument(
        '-f',
        '--from-hostname',
        type=str,
        default=socket.gethostname(),
        help='Specify hostname space to backup to, or restore from. E.g. ' +
              'hera.woolie.co.uk'
    )
    argparser.add_argument(
        '-t',
        '--btype',
        type=str,
        default='full',
        choices=['full', 'incremental'],
        help='Full or incremental backup?'
    )
    args = argparser.parse_args()

    config = ConfigParser.RawConfigParser()
    config.read('/etc/wp-backup/' + args.identifier)

    bkp = WordpressBackup(
        btype=args.btype,
        no_op=args.no_op,
        identifier=args.identifier,
        dest_path=config.get(args.identifier, 'destination_path'),
        wp_path=config.get(args.identifier, 'local_wp_path'),
        domain=config.get(args.identifier, 'domain'),
        restore=args.restore_from_backup,
        from_host=args.from_hostname
    )
