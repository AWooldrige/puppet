#!/bin/bash
# ARG_HELP([Backup a directory to remote storage using duplicity])
# ARG_POSITIONAL_SINGLE([action],["backup" or "restore"])
# ARG_POSITIONAL_SINGLE([name],[Give a name to the contents of the directory to ensure it is unique within the backup destination])
# ARG_POSITIONAL_SINGLE([dir],[Directory to backup])
# ARG_OPTIONAL_SINGLE([hostname],[n],[Hostname to set, defaults to hostname of current system. Change if restoring from a different hostname to this one.],[current-system])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
    local _ret="${2:-1}"
    test "${_PRINT_HELP:-no}" = yes && print_help >&2
    echo "$1" >&2
    exit "${_ret}"
}


begins_with_short_option()
{
    local first_option all_short_options='hn'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_hostname="current-system"


print_help()
{
    printf '%s\n' "Backup a directory to remote storage using duplicity"
    printf 'Usage: %s [-h|--help] [-n|--hostname <arg>] <action> <name> <dir>\n' "$0"
    printf '\t%s\n' "<action>: \"backup\" or \"restore\""
    printf '\t%s\n' "<name>: Give a name to the contents of the directory to ensure it is unique within the backup destination"
    printf '\t%s\n' "<dir>: Directory to backup"
    printf '\t%s\n' "-h, --help: Prints help"
    printf '\t%s\n' "-n, --hostname: Hostname to set, defaults to hostname of current system. Change if restoring from a different hostname to this one. (default: 'current-system')"
}


parse_commandline()
{
    _positionals_count=0
    while test $# -gt 0
    do
        _key="$1"
        case "$_key" in
            -h|--help)
                print_help
                exit 0
                ;;
            -h*)
                print_help
                exit 0
                ;;
            -n|--hostname)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_hostname="$2"
                shift
                ;;
            --hostname=*)
                _arg_hostname="${_key##--hostname=}"
                ;;
            -n*)
                _arg_hostname="${_key##-n}"
                ;;
            *)
                _last_positional="$1"
                _positionals+=("$_last_positional")
                _positionals_count=$((_positionals_count + 1))
                ;;
        esac
        shift
    done
}


handle_passed_args_count()
{
    local _required_args_string="'action', 'name' and 'dir'"
    test "${_positionals_count}" -ge 3 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 3 (namely: $_required_args_string), but got only ${_positionals_count}." 1
    test "${_positionals_count}" -le 3 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 3 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
    local _positional_name _shift_for=$1
    _positional_names="_arg_action _arg_name _arg_dir "

    shift "$_shift_for"
    for _positional_name in ${_positional_names}
    do
        test $# -gt 0 || break
        eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
        shift
    done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
#
source /usr/share/wpu/wpu_shell

log "Starting $_arg_action of $_arg_name at $_arg_dir"
send_statsd "backuptool.initiated,action=$_arg_action,name=$_arg_name:1|c"

if [ ! -d "$_arg_dir" ]; then
    error "$_arg_dir does not exist"
fi

if ! is_toggle_on "enabled_backups"; then
    log "Aborting as backups disabled via /etc/toggles.toml"
    exit 0
fi


# Use GPG symmetric encryption instead of public key.
export PASSPHRASE="$(head -n 1 /etc/backuptool_passphrase)"
if [[ ${#PASSPHRASE} -le 10 ]] ; then
    error "Key in /etc/backuptool_passphrase looks too short"
fi

# Duplicity can't use boto named credentials profiles yet.  Grab these from the
# credentials profile manually.  This is fairly fragile, but effective.
#
# TODO: Move these to secure puppet
export AWS_ACCESS_KEY_ID="$(grep -A 20 '\[ddns\]' /home/woolie/.aws/credentials | grep 'aws_access_key_id=' | head -n 1 | cut -d'=' -f2)"
if [ ${#AWS_ACCESS_KEY_ID} -le 10 ]; then
    error "AWS_ACCESS_KEY_ID shorter than expected."
fi;
export AWS_SECRET_ACCESS_KEY="$(grep -A 20 '\[ddns\]' /home/woolie/.aws/credentials | grep 'aws_secret_access_key=' | head -n 1 | cut -d'=' -f2)"
if [ ${#AWS_SECRET_ACCESS_KEY} -le 10 ]; then
    error "AWS_SECRET_ACCESS_KEY shorter than expected."
fi;

if [ "$_arg_hostname" = "current-system" ]; then
    HN=$(hostname)
else
    HN=$_arg_hostname
fi

LOCAL_PATH="$_arg_dir"
REMOTE_PATH="boto3+s3://wooliebackupbucket/${HN}/${_arg_name}"

if [ "$_arg_action" = "backup" ]; then
    /usr/bin/duplicity \
        backup \
        --name "$_arg_name" \
        --allow-source-mismatch \
        --full-if-older-than 1M  \
        $LOCAL_PATH \
        $REMOTE_PATH
fi

if [ "$_arg_action" = "restore" ]; then
    if [ ! -z "$(find $LOCAL_PATH -mindepth 1 -maxdepth 1)" ]; then
        error "Directory to restore into is not empty: $LOCAL_PATH"
    fi
    /usr/bin/duplicity \
        restore \
        --name "$_arg_name" \
        --allow-source-mismatch \
        --full-if-older-than 1M  \
        $REMOTE_PATH \
        $LOCAL_PATH
fi

send_statsd "backuptool.success,action=$_arg_action,name=$_arg_name:1|c"

# Not really needed but makes me feel better!
unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset PASSPHRASE

# ] <-- needed because of Argbash
