"#########################################################################
"##   This file is controlled by Puppet - changes will be overwritten   ##
"#########################################################################
" A fair chunk of this config has been nabbed from ivanbrennan:
" https://github.com/ivanbrennan/vim/blob/master/vimrc

set encoding=utf8
set nocompatible

" VUNDLE
"==============================================================================
filetype off                  " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'tpope/vim-surround'

filetype plugin indent on     " required!



" GENERAL SETTINGS
"==============================================================================

let mapleader = ","             "Set the leader key

" notifications
set shortmess+=I                " disable intro message
set showcmd                     " show incomplete commands down bottom
set visualbell                  " don't beep

" backups and swap files
set backup                      " backup files
set backupdir=~/.vim/backup     " backups here
set directory=~/.vim/tmp        " temp files here
set history=1000                " history 1000-deep

" persistent undo
set undodir=~/.vim/undo
set undofile


" NETRW FILE BROWSER SETTINGS
"==============================================================================
let g:netrw_list_hide='\(^\|\s\s\)\zs\.\S\+,^DS_Store$'
let g:netrw_hide=1              " hide hidden files
let g:netrw_dirhistmax=100      " keep more history
let g:netrw_altfile=1           " last edited file '#'
let g:netrw_liststyle=3         " tree
let g:netrw_banner=0            " no banner
let g:netrw_altv=1              " open files on right
let g:netrw_preview=1           " open previews vertically
let g:netrw_use_errorwindow=0   " suppress error window


" EDITING
"==============================================================================
set textwidth=79                 " autowrap
set backspace=indent,eol,start  "Allow backspace in insert mode
set autoread                    "Reload files changed outside vim
set hidden                      "Allow vim to maintain background buffers

" indentation
set shiftwidth=4
set softtabstop=4
set tabstop=4
set autoindent
set smartindent
set smarttab
set expandtab                   " convert tabs to spaces

" trailing whitespace
set list!
set listchars=tab:>-,trail:$,extends:>,precedes:<,nbsp:_

" appearance
set colorcolumn=80              " stick a visible column at 80 chars
set number                      "Line numbers are good
set title                       "Set the terminal title
set fillchars+=vert:\           " clean dividers
set cursorline                  " cursorline on
set foldmethod=marker           " fold markers

" spelling
setlocal spell spelllang=en_gb
set nospell

" syntax highlighting
syntax on
syntax enable
au BufNewFile,BufRead *.pp set filetype=puppet
au BufNewFile,BufRead *.vcl set filetype=c


" COMPLETION SETTINGS
"==============================================================================
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set wildmode=list:longest

" output and VCS
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem
" archives
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
" bundler and sass
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
" librarian-chef, vagrant, test-kitchen and Berkshelf
set wildignore+=*/tmp/librarian/*,*/.vagrant/*,*/.kitchen/*,*/vendor/cookbooks/*
" rails temporary asset caches
set wildignore+=*/tmp/cache/assets/*/sprockets/*,*/tmp/cache/assets/*/sass/*
" temp and backup files
set wildignore+=*.swp,*~,._*
" OSX bullshit
set wildignore+=*.DS_Store


" SEARCHING
"==============================================================================
set incsearch        "Find the next match as we type the search
set ignorecase                  " searches are case insensitive...
set smartcase                   " ...unless they contain a capital letter
set hlsearch         "Hilight searches by default
set viminfo='100,f1  "Save up to 100 marks, enable capital marks


" MAPPINGS
"==============================================================================

" toggle highliting of search terms
noremap <silent> <Space> :set hlsearch! hlsearch?<CR>

" toggle spellcheck
noremap <leader>s :set spell! spell?<CR>

" open netrw file browser
noremap <silent> <Leader>n :call VexToggle("")<CR>
noremap <silent> <Leader>e :call ExToggle("")<CR>
noremap <silent> <Leader>,e :call ExToggle(getcwd())<CR>
noremap <silent> <Leader><Tab> :call VexToggle("")<CR>
noremap <silent> <Leader>,<Tab> :call VexToggle(getcwd())<CR>

" quicker navigation of splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Use sudo to save
cmap w!! %!sudo tee > /dev/null %


" AUTO COMMANDS
"==============================================================================

" netrw
augroup NetrwGroup
  autocmd!
  autocmd BufEnter          * call NormalizeWidths()
augroup END



" FUNCTIONS
"==============================================================================
fun! ExToggle(dir)
  if &filetype != "netrw"
    call ExOpen(a:dir)
  else
    call ExClose()
  endif
endf

fun! ExOpen(dir)
  exe "Explore " . a:dir
  let g:netrw_browse_split=0    " open files in current window
endf

fun! ExClose()
  while &filetype == "netrw"
    exe "normal! \<C-O>"
  endw
endf

fun! VexToggle(dir)
  if exists("t:vex_buf_nr")
    call VexClose()
  else
    call VexOpen(a:dir)
  endif
endf

fun! VexOpen(dir)
  let g:netrw_browse_split=4    " open files in previous window
  let vex_width = 27

  exe "Vexplore " . a:dir
  let t:vex_buf_nr = bufnr("%")
  wincmd H

  call VexSize(vex_width)
endf

fun! VexClose()
  let cur_win_nr = winnr()
  let target_nr = ( cur_win_nr == 1 ? winnr("#") : cur_win_nr )

  1wincmd w
  close
  unlet t:vex_buf_nr

  exe (target_nr - 1) . "wincmd w"
  call NormalizeWidths()
endf

fun! VexSize(vex_width)
  exe "vertical resize" . a:vex_width
  set winfixwidth
  call NormalizeWidths()
endf

fun! NormalizeWidths()
  let eadir_pref = &eadirection
  set eadirection=hor
  set equalalways! equalalways!
  let &eadirection = eadir_pref
endf
