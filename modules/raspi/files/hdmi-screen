#!/usr/bin/env bash
#########################################################################
##   This file is controlled by Puppet - changes will be overwritten   ##
#########################################################################
#
# This is a positional arguments-only example of Argbash potential
#
# ARG_HELP([The general script's help msg])
# ARG_POSITIONAL_SINGLE([action],[Action to perform: (on|off|status)],[status])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.5.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_action="status"
# THE DEFAULTS INITIALIZATION - OPTIONALS

print_help ()
{
	printf "%s\n" "The general script's help msg"
	printf 'Usage: %s [-h|--help] [<action>]\n' "$0"
	printf "\t%s\n" "<action>: Action to perform: (on|off|status) (default: '""status""')"
	printf "\t%s\n" "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_positionals+=("$1")
				;;
		esac
		shift
	done
}


handle_passed_args_count ()
{
	test ${#_positionals[@]} -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${#_positionals[@]} (the last one was: '${_positionals[*]: -1}')." 1
}

assign_positional_args ()
{
	_positional_names=('_arg_action' )

	for (( ii = 0; ii < ${#_positionals[@]}; ii++))
	do
		eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


case "$_arg_action" in
"off")
    echo 'Turning TV off'
	echo 'standby 0' | cec-client -s -d 1
    ;;
"on")
    echo 'Turning TV on'
    echo 'on 0' | cec-client -s -d 1
    echo 'Waiting 20 seconds to let TV power on'
    sleep 20
    echo 'Setting TV to select Raspberry PI HDMI'
    echo 'as' | cec-client -s -d 1
    #tvservice --explicit="DMT 35 HDMI"
    ;;
"status")
	echo "Not sure"
    ;;
esac


# ] <-- needed because of Argbash
